"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9290],{97667:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var t=n(74848),r=n(28453);const i={},a="Members",o={id:"user-guides/settings/namespace/members/index",title:"Members",description:"Members are users with access rights to contribute within a namespace. They are",source:"@site/docs/user-guides/settings/namespace/members/index.md",sourceDirName:"user-guides/settings/namespace/members",slug:"/user-guides/settings/namespace/members/",permalink:"/droid-docs/user-guides/settings/namespace/members/",draft:!1,unlisted:!1,editUrl:"https://github.com/shellhub-io/docs/tree/master/docs/user-guides/settings/namespace/members/index.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Deleting API Keys",permalink:"/droid-docs/user-guides/settings/namespace/api-keys/delete"},next:{title:"Inviting Members",permalink:"/droid-docs/user-guides/settings/namespace/members/invite"}},c={},d=[{value:"API Keys",id:"api-keys",level:2}];function m(e){const s={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"members",children:"Members"})}),"\n",(0,t.jsxs)(s.p,{children:["Members are users with access rights to contribute within a namespace. They are\nessential to collaborative environments, allowing multiple users to work\ntogether in the same namespace. Each member is assigned a specific\n",(0,t.jsx)(s.a,{href:"roles",children:"role"})," that defines their access level and permissions within the\nnamespace. These roles are hierarchical, so members in higher roles inherit the\npermissions of those in lower roles."]}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsxs)(s.p,{children:["When a namespace is created, the user who creates it is automatically\ndesignated as the ",(0,t.jsx)(s.strong,{children:"owner"}),". The owner has the highest level of permissions\nwithin the namespace."]})}),"\n",(0,t.jsxs)(s.p,{children:["Members can have one of two statuses: ",(0,t.jsx)(s.strong,{children:"pending"})," or ",(0,t.jsx)(s.strong,{children:"accepted"}),". Members with\na ",(0,t.jsx)(s.strong,{children:"pending"})," status cannot perform any actions until they accept the\ninvitation."]}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["In ",(0,t.jsx)(s.em,{children:"enterprise"})," and ",(0,t.jsx)(s.em,{children:"community"})," environments, members are always assigned an\n",(0,t.jsx)(s.strong,{children:"accepted"})," status."]})}),"\n",(0,t.jsx)(s.p,{children:"If a user invited as a member to a namespace does not yet have an account, they\nwill first be redirected to complete their registration and then accept the\ninvitation."}),"\n",(0,t.jsx)(s.h2,{id:"api-keys",children:"API Keys"}),"\n",(0,t.jsxs)(s.p,{children:["Members can generate ",(0,t.jsx)(s.a,{href:"/droid-docs/user-guides/settings/namespace/api-keys/",children:"API keys"})," for programmatic access\nto the namespace. They can only create API keys with permissions equal to or\nlower than their own role. API keys are exclusively for namespace management;\nuser-related actions (such as updates) are restricted."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(96540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);