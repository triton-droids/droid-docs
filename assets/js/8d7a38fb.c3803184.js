"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8982],{22349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var o=t(74848),s=t(28453),i=t(28774),r=t(54769);const l={sidebar_position:1},a="Deploying",d={id:"self-hosted/deploying",title:"Deploying",description:"Learn how to deploy a self-hosted ShellHub instance on your own server.",source:"@site/docs/self-hosted/deploying.md",sourceDirName:"self-hosted",slug:"/self-hosted/deploying",permalink:"/docs/self-hosted/deploying",draft:!1,unlisted:!1,editUrl:"https://github.com/shellhub-io/docs/tree/master/docs/self-hosted/deploying.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/docs/self-hosted/"},next:{title:"Configuration",permalink:"/docs/self-hosted/configuring"}},c={},h=[{value:"System Requirements",id:"system-requirements",level:2},{value:"Downloading the latest stable version",id:"downloading",level:2},{value:"Running",id:"running",level:2},{value:"Production Deployment",id:"production-deployment",level:2},{value:"Enable HTTPS",id:"enable-https",level:3},{value:"Automatic HTTPS with Let&#39;s Encrypt",id:"automatic-https-with-lets-encrypt",level:4},{value:"NGINX SSL terminator",id:"nginx-ssl-terminator",level:4},{value:"Layer 4 load balancer",id:"layer-4-load-balancer",level:4},{value:"Setup MongoDB persistent volume",id:"setup-mongodb-persistent-volume",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"deploying",children:"Deploying"})}),"\n",(0,o.jsx)(n.p,{children:"Learn how to deploy a self-hosted ShellHub instance on your own server."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If you prefer to use the cloud hosted service of ShellHub instead of\nself-hosting your own instance, you can skip this guide by creating\nan account in ",(0,o.jsx)(n.a,{href:"https://shellhub.io",children:"ShellHub Cloud"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"ShellHub is designed using the microservices design pattern, so that multiple small\nand isolated Docker containers make up the server."}),"\n",(0,o.jsx)(n.p,{children:"In order to eliminate environmental issues of missing, outdated, or mismatching dependencies,\nspecific operating system issues, or problems during manual installations,\nwe have created a Docker Compose environment that brings all of these Docker containers up\nand connects them together as one server."}),"\n",(0,o.jsx)(n.h2,{id:"system-requirements",children:"System Requirements"}),"\n",(0,o.jsx)(n.p,{children:"Before continuing, make sure:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Docker Engine and Docker Compose are installed properly."}),"\n",(0,o.jsxs)(n.li,{children:["Following ports are open: ",(0,o.jsx)(n.em,{children:"TCP 80"})," and ",(0,o.jsx)(n.em,{children:"TCP 22"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"downloading",children:"Downloading the latest stable version"}),"\n",(0,o.jsxs)("p",{children:["Checkout the latest stable version (",(0,o.jsx)("strong",{children:r.$.version}),") of ShellHub as follows:"]}),"\n",(0,o.jsx)("pre",{children:(0,o.jsxs)(n.p,{children:["git clone -b ",r.$.version," ",(0,o.jsx)(n.a,{href:"https://github.com/shellhub-io/shellhub.git",children:"https://github.com/shellhub-io/shellhub.git"})]})}),"\n",(0,o.jsx)(n.h2,{id:"running",children:"Running"}),"\n",(0,o.jsx)(n.p,{children:"Change to directory where ShellHub is located\n(the one that you just cloned with git) and run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"make keygen\nmake start\n"})}),"\n",(0,o.jsx)(n.p,{children:"Be patient, it can take up to 10 minutes for the first time."}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"Once ShellHub starts, it will always start automatically during the boot process\nunless you explicitly stop it."})}),"\n",(0,o.jsx)(n.p,{children:"After starting the containers, run the setup script to complete the installation\nand create an initial user:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"./bin/setup\n"})}),"\n",(0,o.jsx)(n.p,{children:"This will generate a signed URL. Access this URL to finalize the setup."}),"\n",(0,o.jsxs)(n.p,{children:["Now you can access ShellHub on ",(0,o.jsx)(n.a,{href:"http://localhost",children:"http://localhost"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,o.jsx)(n.p,{children:"For production deployment, there are a few things to modified to make sure\nyour deployment is ready for production usage."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Before going to production, you should first familiarize yourself with the\nShellHub platform and how it works."})}),"\n",(0,o.jsx)(n.h3,{id:"enable-https",children:"Enable HTTPS"}),"\n",(0,o.jsxs)(n.p,{children:["ShellHub provides automatic HTTPS support using ",(0,o.jsx)(n.em,{children:"Let's Encrypt"})," but if\nyou want to mananually configure HTTPS, this is commonly achieved by\nrunning NGINX with your certificates on your Docker host, service or\nload balancers in-front of the running container."]}),"\n",(0,o.jsx)(n.h4,{id:"automatic-https-with-lets-encrypt",children:"Automatic HTTPS with Let's Encrypt"}),"\n",(0,o.jsxs)(n.p,{children:["ShellHub provides automatic HTTPS support using ",(0,o.jsx)(n.em,{children:"Let's Encrypt"}),"  with reasonable SSL settings, HTTP/2 and WebSockets support out-of-the-box."]}),"\n",(0,o.jsxs)(n.p,{children:["Please see ",(0,o.jsx)(n.a,{href:"/self-hosted/configuring/#shellhub_auto_ssl",children:(0,o.jsx)(n.code,{children:"SHELLHUB_AUTO_SSL"})})," config option."]}),"\n",(0,o.jsx)(n.h4,{id:"nginx-ssl-terminator",children:"NGINX SSL terminator"}),"\n",(0,o.jsxs)(n.p,{children:["In case you are using NGINX as SSL terminator instead,\nmake sure to set the ",(0,o.jsx)(n.code,{children:"SHELLHUB_HTTP_PORT"})," to only bind to localhost by\nadding the following line to the ",(0,o.jsx)(n.code,{children:"docker-compose.override.yml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"version: '3.7'\nservices:\n  gateway:\n      ports:\n       - \"${SHELLHUB_BIND_ADDRESS}:${SHELLHUB_HTTP_PORT}:80\"\n"})}),"\n",(0,o.jsx)(n.p,{children:"When using NGINX do not forget to allow websocket traffic to be handled properly.\nThis can be done by adding the following blocks to your NGINX configuration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:' location / {\n     proxy_pass http://<SHELLHUB_BIND_ADDRESS>:<SHELLHUB_HTTP_PORT>;\n     proxy_http_version 1.1;\n     proxy_set_header Upgrade $http_upgrade;\n     proxy_set_header Connection "upgrade";\n     proxy_read_timeout 86400;\n     proxy_set_header Host $host;\n}\n\nlocation /ws/ {\n     proxy_pass http://<SHELLHUB_BIND_ADDRESS>:<SHELLHUB_HTTP_PORT>;\n     proxy_http_version 1.1;\n     proxy_set_header Upgrade $http_upgrade;\n     proxy_set_header Connection "upgrade";\n     proxy_read_timeout 86400;\n}\n\nlocation /ssh/ {\n     proxy_pass http://<SHELLHUB_BIND_ADDRESS>:<SHELLHUB_HTTP_PORT>;\n     proxy_http_version 1.1;\n     proxy_set_header Upgrade $http_upgrade;\n     proxy_set_header Connection "upgrade";\n     proxy_read_timeout 86400;\n }\n'})}),"\n",(0,o.jsx)(n.h4,{id:"layer-4-load-balancer",children:"Layer 4 load balancer"}),"\n",(0,o.jsxs)(n.p,{children:["When putting a Layer 4 load balancer in-front of ShellHub you need to enable ",(0,o.jsx)(i.A,{to:"https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt",children:"PROXY protocol"}),"\nsupport on it and configure ShellHub to deal with PROXY protocol header by setting ",(0,o.jsx)(n.code,{children:"SHELLHUB_PROXY=true"})," config option in the ",(0,o.jsx)(n.code,{children:"docker-compose.override.yml"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"setup-mongodb-persistent-volume",children:"Setup MongoDB persistent volume"}),"\n",(0,o.jsx)(n.p,{children:"By default, MongoDB persistent files are stored by writting files to disk\non the host system using the Docker's internal volume management."}),"\n",(0,o.jsx)(n.p,{children:"In a production environment, it is recommended to create a data directory\non the host system filesystem and mount this into the MongoDB container.\nThis places the persistent files in a known location on the host system\nfilesystem, and makes it easy for tools and applications on the host system\nto access the files."}),"\n",(0,o.jsxs)(n.p,{children:["To achieve this, put the following in the ",(0,o.jsx)(n.code,{children:"docker-compose.override.yml"}),"\nfile inside ShellHub project dir:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"version: '3.7'\nservices:\n  mongo:\n\tvolumes:\n      - /usr/local/mongo/data:/data/db\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Make sure ",(0,o.jsx)(n.code,{children:"/usr/local/mongo/data"})," directory exists on the host file system."]})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},54769:(e,n,t)=>{t.d(n,{$:()=>o});const o={version:"v0.18.0"}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);