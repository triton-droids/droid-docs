"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[552],{5778:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var s=n(4848),r=n(8453);const t={sidebar_position:1},c="Policies",l={id:"simulation/firewall/policies",title:"Policies",description:"Policies can allow, permitting connections that match the specified",source:"@site/docs/simulation/firewall/policies.md",sourceDirName:"simulation/firewall",slug:"/simulation/firewall/policies",permalink:"/droid-docs/simulation/firewall/policies",draft:!1,unlisted:!1,editUrl:"https://github.com/triton-droids/droid-docs/tree/main/docs/simulation/firewall/policies.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Firewall Rules",permalink:"/droid-docs/simulation/firewall/"},next:{title:"Creating Firewall Rules",permalink:"/droid-docs/simulation/firewall/create"}},o={},a=[{value:"Policy Parameters",id:"policy-parameters",level:2},{value:"Source IP",id:"source-ip",level:3},{value:"Username",id:"username",level:3},{value:"Device Matching",id:"device-matching",level:3}];function d(e){const i={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"policies",children:"Policies"})}),"\n",(0,s.jsxs)(i.p,{children:["Policies can ",(0,s.jsx)(i.strong,{children:"allow"}),", permitting connections that match the specified\ncriteria or ",(0,s.jsx)(i.strong,{children:"deny"}),", blocking connections that match the specified criteria.\nEach policy can be configured using various parameters to create precise access\ncontrol rules."]}),"\n",(0,s.jsx)(i.h2,{id:"policy-parameters",children:"Policy Parameters"}),"\n",(0,s.jsx)(i.h3,{id:"source-ip",children:"Source IP"}),"\n",(0,s.jsx)(i.p,{children:"Controls access based on the origin IP address of the connection. You can:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Apply the rule to all IP addresses"}),"\n",(0,s.jsx)(i.li,{children:"Restrict access using regular expressions"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"username",children:"Username"}),"\n",(0,s.jsx)(i.p,{children:"Manages access based on the authentication username of the connection. This\nparameter helps enforce user-level access controls across your infrastructure."}),"\n",(0,s.jsx)(i.h3,{id:"device-matching",children:"Device Matching"}),"\n",(0,s.jsx)(i.p,{children:"Determines which devices the firewall rule affects. You can configure this\nusing three approaches:"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Global Application"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Applies the rule to all devices in your infrastructure"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Hostname Pattern"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Restricts the rule to devices whose hostnames match a specified regular expression"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Device Tags"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Limits the rule to devices that have tags matching the specified regular expression"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>l});var s=n(6540);const r={},t=s.createContext(r);function c(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);